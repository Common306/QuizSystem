@model QuizSystemWeb.Models.Quiz
@{
    ViewData["Title"] = "Manage Quiz";

    ViewData["SubTitle"] = "Manage Quiz";
    ViewData["ManageQuiz"] = "active";

    Layout = "_Layout";
}
<div class="container-fluid py-4">
    <div class="row">
        <div class="col-12">
            <div class="card mb-4">
                <div class="card-header pb-0">
                    <a class="form-control-label text-primary" href="../quiz/quizzes"><i class="ni ni-bold-left"></i> Back</a>
                    <h2>@Model.Title</h2>
                </div>

                <form class="p-4" method="post" asp-action="SubmitQuiz">
                    @{
                        int i = 1;
                        int count = 0;
                    }
                    @foreach (Question question in Model.Questions)
                    {
                        List<Answer> list = question.Answers.ToList();

                        <div class="form-group">
                            <h6 class="form-control-label">
                                @i. @question.Content<span style=" margin-left: 8px; " class="text-danger d-none">*Please choose at least 1 answer</span>
                            </h6>
                            @{
                                i++;
                            }
                            <div style="padding-left: 15px">
                                @foreach (Answer ans in question.Answers)
                                {
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" name="@question.QuestionId" value="@ans.AnswerId" id="@ans.AnswerId">
                                        <label for="@ans.AnswerId" class="custom-control-label">@ans.Content</label>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                    <input name="quizId" value="@Model.QuizId" hidden />
                    <input name="startAt" id="startAt" type="datetime" hidden />
                    <button class="btn btn-icon btn-3 btn-primary" type="submit">
                        <span class="btn-inner--text">Submit</span>
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>
<script>
    // Tạo một đối tượng Date mới
    var now = new Date();

    // Lấy giá trị ngày giờ hiện tại
    var year = now.getFullYear();
    var month = (now.getMonth() + 1).toString().padStart(2, '0');
    var day = now.getDate().toString().padStart(2, '0');
    var hours = now.getHours().toString().padStart(2, '0');
    var minutes = now.getMinutes().toString().padStart(2, '0');

    // Tạo chuỗi có định dạng YYYY-MM-DDTHH:MM (đúng định dạng của datetime-local input)
    var formattedDate = year + '-' + month + '-' + day + 'T' + hours + ':' + minutes;

    // Gán giá trị ngày giờ vào ô input
    document.getElementById('startAt').value = formattedDate;


    // Function to handle form submission
    function handleSubmit(event) {
        event.preventDefault(); // Prevent the form from submitting by default

        // Get all the form groups
        const formGroups = document.querySelectorAll(".form-group");

        // Variable to keep track of the overall form validity
        let isFormValid = true;

        formGroups.forEach((formGroup) => {
            // Get all the checkboxes in each form group
            const checkboxes = formGroup.querySelectorAll(".form-check-input");

            // Get the span element inside each form group
            const errorMsg = formGroup.querySelector(".text-danger");

            // Check if at least one checkbox is checked in the form group
            const isAnyCheckboxChecked = Array.from(checkboxes).some((checkbox) => checkbox.checked);

            // Toggle the "d-none" class based on the checkbox status
            if (isAnyCheckboxChecked) {
                errorMsg.classList.add("d-none");
            } else {
                errorMsg.classList.remove("d-none");
                isFormValid = false; // Set the form validity flag to false
            }
        });

        // If the form is valid, submit it
        if (isFormValid) {
            const form = event.target.closest("form"); // Find the parent form of the submit button
            form.submit(); // Submit the form
        }
    }

    // Attach the event listener to the form submit button
    const submitButton = document.querySelector(".btn[type='submit']");
    submitButton.addEventListener("click", handleSubmit);
</script>